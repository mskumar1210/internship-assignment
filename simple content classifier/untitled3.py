# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GOWxOlLM2ADBlKa8fj7BtRDTorIUae3M
"""

import pandas as pd

# Sample dataset
data = {
    'description': [
        'A love story between a high school girl and a popular boy.',
        'A fantasy adventure in a world of magic and dragons.',
        'A thrilling detective story with unexpected twists.',
        'A heartwarming tale of friendship and romance.',
        'A horror story set in an abandoned house.',
        'An action-packed journey of a hero saving the world.',
        'A comedic take on the life of a high school student.',
        'A sci-fi adventure exploring new planets and civilizations.',
        'A historical drama about a royal family.',
        'A slice-of-life story about everyday challenges and love.',
        'A sports drama focusing on a young athleteâ€™s journey.',
        'A supernatural romance with ghosts and mysteries.',
        'An action thriller about a secret agent on a mission.',
        'A coming-of-age story about self-discovery and growth.',
        'A romantic comedy about misunderstandings and love triangles.',
        'A dramatic story about family secrets and betrayal.'
    ],
    'category': [
        'romance',
        'fantasy',
        'action',
        'romance',
        'horror',
        'action',
        'comedy',
        'sci-fi',
        'drama',
        'slice_of_life',
        'sports',
        'supernatural',
        'thriller',
        'drama',
        'romance',
        'drama'
    ]
}

df = pd.DataFrame(data)

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer

# Splitting the data into features and labels
X = df['description']
y = df['category']

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vectorizing the text data
vectorizer = CountVectorizer()
X_train_vectorized = vectorizer.fit_transform(X_train)
X_test_vectorized = vectorizer.transform(X_test)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Initializing and training the logistic regression model
model = LogisticRegression()
model.fit(X_train_vectorized, y_train)

# Making predictions on the test set
y_pred = model.predict(X_test_vectorized)

# Evaluating the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print('Classification Report:\n', report)

# Example new descriptions
new_descriptions = [
    'A young girl discovers her powers in a magical world.',
    'A thrilling journey of love and betrayal in the city.',
    'A light-hearted story about a group of friends navigating life.'
]

# Vectorizing new descriptions
new_descriptions_vectorized = vectorizer.transform(new_descriptions)

# Predicting categories for new descriptions
predictions = model.predict(new_descriptions_vectorized)

# Outputting the predictions
for desc, pred in zip(new_descriptions, predictions):
    print(f'Description: "{desc}" - Predicted Category: {pred}')